{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/application/basics-test.js","dummy/tests/application/overlapping-modals-test.js","dummy/tests/integration/components/modal-container-test.js","dummy/tests/test-helper.js","dummy/tests/unit/services/modals-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/application/basics-test\", [\"@ember/test-helpers\", \"ember-qunit\", \"qunit\", \"ember-promise-modals/test-support\"], function (_testHelpers, _emberQunit, _qunit, _testSupport) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Application | basics', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _testSupport.setupPromiseModals)(hooks);\n    (0, _qunit.test)('clicking the backdrop closes the modal', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                assert.dom('.epm-backdrop').doesNotExist();\n                assert.dom('.epm-modal').doesNotExist();\n                _context.next = 6;\n                return (0, _testHelpers.click)('[data-test-show-modal]');\n\n              case 6:\n                assert.dom('.epm-modal').exists();\n                assert.dom('.epm-backdrop').exists(); // we don't have a test waiter on the opening animation, so for this test we wait manually\n\n                _context.next = 10;\n                return (0, _testHelpers.waitUntil)(function () {\n                  var _window$getComputedSt = window.getComputedStyle(document.querySelector('.epm-backdrop')),\n                      opacity = _window$getComputedSt.opacity;\n\n                  return opacity === '1';\n                });\n\n              case 10:\n                assert.dom('.epm-backdrop').hasStyle({\n                  opacity: '1',\n                  pointerEvents: 'auto'\n                });\n                _context.next = 13;\n                return (0, _testHelpers.click)('.epm-backdrop');\n\n              case 13:\n                assert.dom('.epm-backdrop').doesNotExist();\n                assert.dom('.epm-modal').doesNotExist();\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('clicking the backdrop does not close the modal if `clickOutsideDeactivates` is `false`', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.owner.lookup('service:modals').clickOutsideDeactivates = false;\n                _context2.next = 3;\n                return (0, _testHelpers.visit)('/');\n\n              case 3:\n                assert.dom('.epm-backdrop').doesNotExist();\n                assert.dom('.epm-modal').doesNotExist();\n                _context2.next = 7;\n                return (0, _testHelpers.click)('[data-test-show-modal]');\n\n              case 7:\n                assert.dom('.epm-backdrop').exists();\n                assert.dom('.epm-modal').exists();\n                _context2.next = 11;\n                return (0, _testHelpers.click)('.epm-backdrop');\n\n              case 11:\n                assert.dom('.epm-backdrop').exists();\n                assert.dom('.epm-modal').exists();\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('opening a modal disables scrolling on the <body> element', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                assert.dom('body', document).hasStyle({\n                  overflow: 'visible'\n                });\n                _context3.next = 5;\n                return (0, _testHelpers.click)('[data-test-show-modal]');\n\n              case 5:\n                assert.dom('body', document).hasStyle({\n                  overflow: 'hidden'\n                });\n                _context3.next = 8;\n                return (0, _testHelpers.click)('.epm-backdrop');\n\n              case 8:\n                assert.dom('body', document).hasStyle({\n                  overflow: 'visible'\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('pressing the Escape keyboard button closes the modal', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                assert.dom('.epm-modal').doesNotExist();\n                _context4.next = 5;\n                return (0, _testHelpers.click)('[data-test-show-modal]');\n\n              case 5:\n                assert.dom('.epm-modal').exists();\n                _context4.next = 8;\n                return (0, _testHelpers.triggerKeyEvent)(document, 'keydown', 'Escape');\n\n              case 8:\n                assert.dom('.epm-modal').doesNotExist();\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/application/overlapping-modals-test\", [\"@ember/test-helpers\", \"ember-qunit\", \"qunit\", \"ember-promise-modals/test-support\"], function (_testHelpers, _emberQunit, _qunit, _testSupport) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Application | overlapping modals', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _testSupport.setupPromiseModals)(hooks);\n    (0, _qunit.test)('every modal should have a dedicated backdrop', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                assert.dom('.epm-backdrop').doesNotExist();\n                assert.dom('.epm-modal').doesNotExist();\n                _context.next = 6;\n                return (0, _testHelpers.click)('[data-test-show-modal]');\n\n              case 6:\n                assert.dom('.epm-modal').exists();\n                assert.dom('.epm-backdrop').exists({\n                  count: 1\n                });\n                _context.next = 10;\n                return (0, _testHelpers.click)('[data-test-show-modal-2]');\n\n              case 10:\n                _context.next = 12;\n                return (0, _testHelpers.waitUntil)(function () {\n                  var _window$getComputedSt = window.getComputedStyle(document.querySelector('[data-test-epm-backdrop=\"1\"]')),\n                      opacity = _window$getComputedSt.opacity;\n\n                  return opacity === '1';\n                });\n\n              case 12:\n                assert.dom('[data-test-epm-backdrop=\"0\"]').hasStyle({\n                  opacity: '1',\n                  pointerEvents: 'auto'\n                });\n                assert.dom('[data-test-epm-backdrop=\"1\"]').hasStyle({\n                  opacity: '1',\n                  pointerEvents: 'auto'\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('clicking a backdrop closes the associated modal', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                assert.dom('.epm-backdrop').doesNotExist();\n                assert.dom('.epm-modal').doesNotExist();\n                _context2.next = 6;\n                return (0, _testHelpers.click)('[data-test-show-modal]');\n\n              case 6:\n                _context2.next = 8;\n                return (0, _testHelpers.click)('[data-test-show-modal-2]');\n\n              case 8:\n                assert.dom('.epm-backdrop').exists({\n                  count: 2\n                });\n                assert.dom('.epm-modal').exists({\n                  count: 2\n                });\n                _context2.next = 12;\n                return (0, _testHelpers.click)('[data-test-epm-backdrop=\"1\"]');\n\n              case 12:\n                assert.dom('[data-test-epm-backdrop=\"1\"]').doesNotExist();\n                assert.dom('[data-test-epm-modal=\"1\"]').doesNotExist(); // check that there are still a modal and a backdrop left\n\n                assert.dom('.epm-backdrop').exists({\n                  count: 1\n                });\n                assert.dom('.epm-modal').exists({\n                  count: 1\n                });\n                _context2.next = 18;\n                return (0, _testHelpers.click)('[data-test-epm-backdrop=\"0\"]');\n\n              case 18:\n                assert.dom('[data-test-epm-modal=\"0\"]').doesNotExist(); // check that there are no modals nor backdrops left\n\n                assert.dom('.epm-backdrop').doesNotExist();\n                assert.dom('.epm-modal').doesNotExist();\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/modal-container-test\", [\"@ember/template-factory\", \"@ember/test-helpers\", \"ember-qunit\", \"qunit\", \"@ember/component\", \"ember-promise-modals/test-support\"], function (_templateFactory, _testHelpers, _emberQunit, _qunit, _component, _testSupport) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Component | ModalContainer', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _testSupport.setupPromiseModals)(hooks);\n    (0, _qunit.test)('renders the modals for the `modals` service', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var modals, modal;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.owner.register('component:foo', _component.default.extend({\n                  tagName: '',\n                  layout: (0, _templateFactory.createTemplateFactory)(\n                  /*\n                    <button type=\"button\">foo</button> {{@data.bar}}\n                  */\n                  {\n                    \"id\": \"tscLCURu\",\n                    \"block\": \"[[[10,\\\"button\\\"],[14,4,\\\"button\\\"],[12],[1,\\\"foo\\\"],[13],[1,\\\" \\\"],[1,[30,1,[\\\"bar\\\"]]]],[\\\"@data\\\"],false,[]]\",\n                    \"moduleName\": \"(unknown template module)\",\n                    \"isStrictMode\": false\n                  })\n                }));\n                _context.next = 3;\n                return (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n                /*\n                  <EpmModalContainer />\n                */\n                {\n                  \"id\": \"irVqHm26\",\n                  \"block\": \"[[[8,[39,0],null,null,null]],[],false,[\\\"epm-modal-container\\\"]]\",\n                  \"moduleName\": \"(unknown template module)\",\n                  \"isStrictMode\": false\n                }));\n\n              case 3:\n                assert.dom('.epm-backdrop').doesNotExist();\n                assert.dom('.epm-modal').doesNotExist();\n                assert.dom(this.element).hasText('');\n                modals = this.owner.lookup('service:modals');\n                modal = modals.open('foo', {\n                  bar: 'baz'\n                });\n                _context.next = 10;\n                return (0, _testHelpers.settled)();\n\n              case 10:\n                assert.dom('.epm-modal').exists({\n                  count: 1\n                });\n                assert.dom('.epm-modal').hasText('foo baz');\n                modal.close();\n                _context.next = 15;\n                return (0, _testHelpers.settled)();\n\n              case 15:\n                assert.dom('.epm-modal').doesNotExist();\n                assert.dom(this.element).hasText('');\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/test-helper\", [\"@ember/test-helpers\", \"ember-qunit\", \"qunit\", \"qunit-dom\", \"dummy/app\", \"dummy/config/environment\"], function (_testHelpers, _emberQunit, QUnit, _qunitDom, _app, _environment) {\n  \"use strict\";\n\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"dummy/tests/unit/services/modals-test\", [\"ember-qunit\", \"qunit\"], function (_emberQunit, _qunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Service | modals', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('basics', function (assert) {\n      var modals = this.owner.lookup('service:modals');\n      assert.equal(modals.count, 0, '#count');\n      assert.strictEqual(modals.top, undefined, '#top');\n      var modal1 = modals.open('modal1', {\n        foo: 'bar'\n      });\n      assert.equal(modals.count, 1, '#count');\n      assert.strictEqual(modals.top, modal1, '#top');\n      var modal2 = modals.open('modal2');\n      assert.equal(modals.count, 2, '#count');\n      assert.strictEqual(modals.top, modal2, '#top');\n\n      modal2._remove();\n\n      assert.equal(modals.count, 1, '#count');\n      assert.strictEqual(modals.top, modal1, '#top');\n\n      modal1._remove();\n\n      assert.equal(modals.count, 0, '#count');\n      assert.strictEqual(modals.top, undefined, '#top');\n    });\n    (0, _qunit.test)('modals can have results', function (assert) {\n      var modals = this.owner.lookup('service:modals');\n      var modal = modals.open('modal');\n      assert.strictEqual(modal.result, undefined);\n\n      modal._resolve('foo');\n\n      assert.strictEqual(modal.result, 'foo');\n\n      modal._remove();\n    });\n    (0, _qunit.test)('modals are promises', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var modals, modal, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                modals = this.owner.lookup('service:modals');\n                modal = modals.open('modal'); // eslint-disable-next-line promise/catch-or-return\n\n                modal.then(function () {\n                  assert.step('then');\n                });\n                assert.verifySteps([]);\n\n                modal._resolve('foo');\n\n                _context.next = 7;\n                return modal;\n\n              case 7:\n                result = _context.sent;\n                assert.verifySteps(['then']);\n                assert.equal(result, 'foo');\n\n                modal._remove();\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('modals do not show up in openCount when closing', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var modals, modal;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                modals = this.owner.lookup('service:modals');\n                modal = modals.open('modal');\n                assert.equal(modals.count, 1);\n\n                modal._resolve();\n\n                assert.equal(modals.count, 0);\n\n                modal._remove();\n\n                assert.equal(modals.count, 0);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('modals will call the optional onAnimationModalOutEnd hook when it is passed as an option', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var modals, modal;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                modals = this.owner.lookup('service:modals');\n                modal = modals.open('modal', {}, {\n                  onAnimationModalOutEnd: function onAnimationModalOutEnd() {\n                    assert.step('animation ended');\n                  }\n                });\n                assert.step('modal open');\n\n                modal._resolve();\n\n                assert.step('modal closing');\n\n                modal._remove();\n\n                assert.step('modal closed'); // we need to wait a tick for the closing animation promise to be resolved\n\n                _context3.next = 9;\n                return new Promise(function (resolve) {\n                  setTimeout(resolve, 0);\n                });\n\n              case 9:\n                assert.verifySteps(['modal open', 'modal closing', 'modal closed', 'animation ended']);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsjBA;AACA;","file":"tests.js"}